// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// Thanks to:
// - h3x3r (https://reshax.com/profile/183-h3x3r/) for the BMS script and 010 template.
// - Hampter49 (https://reshax.com/profile/1946-hampter49/) for somewhat explaining what I actually needed to do.
// - GameBreaker (https://reshax.com/profile/731-gamebreaker/) for the helpful Stingray playlist video link.
// - DKDave (https://reshax.com/profile/70-dkdave/) for pointing me at a file that revealed so much more about the mesh structure than we had known until now.


#ifndef HELLDIVERS2_MESHINFO
#define HELLDIVERS2_MESHINFO

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_MESHINFO_INCLUDE
#endif
#include "helldivers2_common.bt"
#include "helldivers2_datatype.bt"
#include "helldivers2_mesh.bt"
#ifdef HELLDIVERS2_MESHINFO_INCLUDE
    #undef IS_INCLUDE
#endif

struct meshinfo_t {
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    
    uint32_t __unkoffset <format=decimal>;
    uint32_t __unkoffset <format=decimal>;
    uint32_t __unkoffset <format=decimal>;
    uint32_t __unkoffset <format=decimal>;
    
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    uint32_t __unkoffset <format=decimal>;
    
    uint32_t __unkoffset <format=decimal>;
    uint32_t __unk <format=hex>;
    uint32_t __unkoffset <format=decimal>;
    uint32_t datatype_list_offset <format=decimal>;
    
    uint32_t __unkoffset <format=decimal>;
    uint32_t mesh_list_offset <format=decimal>;
    uint32_t __unk <format=hex>;
    uint32_t __unk <format=hex>;
    
    uint32_t material_hashmap_offset <format=decimal>;
    
    if (__unkoffset[3] != 0) {
        FSeek(__unkoffset[3]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk3;
    }
    
    if (__unkoffset[2] != 0) {
        FSeek(__unkoffset[2]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            struct {                
                uint32_t __unk <format=hex>;
                float width;
                float height;
                float depth;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
            } textures[count];
        } __unk2;
    }
    
    if (__unkoffset[0] != 0) {
        FSeek(__unkoffset[0]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t offsets[count] <format=decimal>;
            
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                struct {
                    uint32_t __unk <format=hex>;
                    uint32_t __unk <format=hex>;
                    uint32_t __unk <format=hex>;
                    uint32_t __unk <format=hex>;
                                        
                    uint32_t count <format=decimal>;
                    uint32_t offsets[count] <format=decimal>;
                    uint32_t size <format=decimal>;
                    
                    local uint32 i;
                    for (i = 0; i < count; i++) {
                        FSeek(startof(this) + offsets[i]);
                        struct {
                            float __unk;
                            float __unk;
                            
                            uint32_t count <format=decimal>;
                            uint32_t data[count] <format=decimal>;
                        } __unk;
                    }
                } __unk00data;
                
                float __unk;
                float __unk;
                float __unk;
                float __unk;
                
                float __unk;
                float __unk;
                float __unk;
                uint32_t __unk <format=hex>;
                
                float __unk;
                uint32_t __unk <format=hex>;                
            };
        } __unk0;
    }
    
    if (__unkoffset[1] != 0) { // 
        FSeek(__unkoffset[1]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            f32mat4x4_t __unk0[count];
            f32mat4x4_t __unk1[count];
            u16vec2_t __unk2[count];
			BigEndian();
            uint32_t __unk3[count] <format=hex>;
			LittleEndian();
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk1;
    }
        
    if (__unkoffset[6] != 0) { // 768 bytes. Suspicious.
        FSeek(__unkoffset[6]);
        struct {
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            /*local uint32 i;
            for (i = 0; i < count; i++) {
                f32mat4x4_t __unk;
            }*/
        } __unk6;
    }
    
    if (datatype_list_offset != 0) {
        FSeek(datatype_list_offset);
        struct {
            uint32 count <format=decimal>;
            uint32 offsets[count] <format=decimal>;
			BigEndian();
            uint32 __unk_hashes[count] <format=hex>;
			LittleEndian();
            uint32 __unk <format=hex>;
            
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                datatype_t datatype;
            }
        } datatypes;
    }
    
    if(mesh_list_offset > 0) {
        FSeek(mesh_list_offset);
        struct {
            uint32 count <format=decimal>;
            uint32 offsets[count];
			BigEndian();
            uint32 __unk_hashes[count] <format=hex>;
			LittleEndian();
            
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                mesh_t mesh;
            }
        } meshes;
    }
    
    if(material_hashmap_offset > 0) {
        FSeek(material_hashmap_offset);
        struct {
            uint32 count <format=decimal>;
			BigEndian();
            uint32 keys[count] <format=hex>;
            uint64 values[count] <format=hex>;
			LittleEndian();
        } materials;
    }
        
    if (__unkoffset[7] != 0) {
        FSeek(__unkoffset[7]);
        struct {
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk7;
    }
    
    // Never seen these?
    if (__unkoffset[4] != 0) {
        FSeek(__unkoffset[4]);
        struct {
            uint32_t __unk <format=hex>;
        } __unk4;
    }
        
    if (__unkoffset[5] != 0) {
        FSeek(__unkoffset[5]);
        struct {
            uint32_t __unk <format=hex>;
        } __unk5;
    }
    
    // BMS error causes this to repeat.
};

#ifndef IS_INCLUDE
meshinfo_t MeshInfo;
#endif

/*
if(Header.Unknown6Offset > 0) {
    FSeek(Header.Unknown6Offset);
    struct Unknown6 {
        char __unk00[16];
    }Unknown6Info;
}

if(Header.Unknown5Offset > 0) {
    FSeek(Header.Unknown5Offset);
    struct Unknown5 {
        uint32 Count;
        char __unk00[12];
        struct {
            char __unk00[8];
            float textureWidth, textureHeight, textureDepth;
            char __unk01[92];
        }Unknown5Data[Count];
    }Unknown5Info;
}

if(Header.Unknown3Offset > 0) {
    FSeek(Header.Unknown3Offset);
    struct Unknown3 {
        uint32 Count;
        struct{
            char __unk00[159];
        }Unknown3Data[Count];
    }Unknown3Info;
}

if(Header.Unknown4Offset > 0) {
    FSeek(Header.Unknown4Offset);
    struct Unknown4 {
        uint32 Count;
        struct {
            uint32 __unk00[34];
        }Unknown4Data[Count];
        // 22192 bytes total?, 56B0
    }Unknown4Info;
}

if(Header.Unknown1Offset > 0) {
    FSeek(Header.Unknown1Offset);
    struct Unknown1 {
        uint32 Count;
        uint32 __unk00;
    }Unknown1Info;
}

if(Header.Unknown2Offset > 0) {
    FSeek(Header.Unknown2Offset);
    struct Unknown2 {
        struct {
            uint32 __unk00[8];
        }Unknown2Data[3];
    }Unknown2Info;
}

if(Header.UnknownOffset > 0) {
    FSeek(Header.UnknownOffset);
    struct Unknown {
        uint32 count;
        uint32 offsets[count];
        struct {
            for (i=0; i < count; i++){
                FSeek(startof(UnknownInfo)+offsets[i]);
                struct {
                    uint32 __unk00[17];
                }UnknownData;
            }    
        }UnknownDatas;
    }UnknownInfo;
}


if(Header.Unknown7Offset > 0) {
    FSeek(Header.Unknown7Offset);
    struct Unknown7 {
        uint32 __unk00[2];
    }Unknown7Info;
}
*/

#endif
