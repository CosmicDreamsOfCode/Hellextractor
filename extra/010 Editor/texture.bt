// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef HELLDIVERS2_TEXTURE
#define HELLDIVERS2_TEXTURE

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_TEXTURE_INCLUDE
#endif
#include "common.bt"
#ifdef HELLDIVERS2_TEXTURE_INCLUDE
    #undef IS_INCLUDE
#endif

enum <uint32_t> DDSD {
    DDSD_CAPS = 0x1,
    DDSD_HEIGHT = 0x2,
    DDSD_WIDTH = 0x4,
    DDSD_PITCH = 0x8,
    DDSD_PIXELFORMAT = 0x1000,
    DDSD_MIPMAPCOUNT = 0x20000,
    DDSD_LINEARSIZE = 0x80000,
    DDSD_DEPTH  = 0x800000,
};

enum <uint32_t> DDSCAPS {
    DDSCAPS_COMPLEX = 0x8,
    DDSCAPS_MIPMAP = 0x400000,
    DDSCAPS_TEXTURE = 0x1000,
};

enum <uint32_t> DDSCAPS2 {
    DDSCAPS2_CUBEMAP = 0x200,    
    DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
    DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
    DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
    DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
    DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
    DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
    DDSCAPS2_VOLUME = 0x200000,
};

enum <uint32_t> DXGI_FORMAT {
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_P208 = 130,
    DXGI_FORMAT_V208 = 131,
    DXGI_FORMAT_V408 = 132,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff
};

enum <uint32_t> D3D11_RESOURCE_DIMENSION {
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D10_RESOURCE_DIMENSION_BUFFER = 1,
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
};

enum <uint32_t> D3D11_RESOURCE_MISC_FLAG {
  D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
  D3D11_RESOURCE_MISC_SHARED = 0x2,
  D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
  D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800,
  D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
  D3D11_RESOURCE_MISC_GUARDED = 0x8000,
  D3D11_RESOURCE_MISC_TILE_POOL = 0x20000,
  D3D11_RESOURCE_MISC_TILED = 0x40000,
  D3D11_RESOURCE_MISC_HW_PROTECTED = 0x80000,
  D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE,
  D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER
};

enum <uint32_t> DDSPF_FLAGS {
    DDS_FOURCC =      0x00000004,  // DDPF_FOURCC
    DDS_RGB =         0x00000040,  // DDPF_RGB
    DDS_RGBA =        0x00000041,  // DDPF_RGB | DDPF_ALPHAPIXELS
    DDS_LUMINANCE =   0x00020000,  // DDPF_LUMINANCE
    DDS_LUMINANCEA =  0x00020001,  // DDPF_LUMINANCE | DDPF_ALPHAPIXELS
    DDS_ALPHAPIXELS = 0x00000001,  // DDPF_ALPHAPIXELS
    DDS_ALPHA =       0x00000002,  // DDPF_ALPHA
    DDS_PAL8 =        0x00000020,  // DDPF_PALETTEINDEXED8
    DDS_PAL8A =       0x00000021,  // DDPF_PALETTEINDEXED8 | DDPF_ALPHAPIXELS
    DDS_BUMPDUDV =    0x00080000,  // DDPF_BUMPDUDV
};

enum <uint32_t> DDS_ALPHA_MODE {
    DDS_ALPHA_MODE_UNKNOWN = 0x0,
    DDS_ALPHA_MODE_STRAIGHT = 0x1,
    DDS_ALPHA_MODE_PREMULTIPLIED = 0x2,
    DDS_ALPHA_MODE_OPAQUE = 0x3,
    DDS_ALPHA_MODE_CUSTOM = 0x4,
};

struct DDS_HEADER_DXT10 {    
    DXGI_FORMAT dxgiFormat;
    D3D11_RESOURCE_DIMENSION resourceDimension;
    D3D11_RESOURCE_MISC_FLAG miscFlag;
    uint32_t arraySize;
    DDS_ALPHA_MODE miscFlags2;
};

struct DDSPF {
    uint32_t size; // Size of this section. Always 32.
    DDSPF_FLAGS flags;
    char fourcc[4];
    uint32_t rgbbitcount;
    uint32_t rbitmask;
    uint32_t gbitmask;
    uint32_t bbitmask;
    uint32_t abitmask;
};

struct dds_t {
    char magic_number[4];
    struct DDS_HEADER {
        uint32_t size; // Size of this header.
        DDSD flags;
        uint32_t width;
        uint32_t height;
        uint32_t pitchOrLinearSize;
        uint32_t depth;
        uint32_t mips;
        uint32_t __reserved1[11];
        DDSPF pixelformat;
        DDSCAPS caps; 
        DDSCAPS2 caps2;
        uint32_t caps3;
        uint32_t caps4;
        uint32_t __reserved;
    } header;
    if (header.pixelformat.flags == DDS_FOURCC) {
        if (header.pixelformat.fourcc == "DX10") {
            DDS_HEADER_DXT10 dx10;
        }
    }
};

struct texture_t {
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    struct texture_offset_t {
        uint32_t offset_to_dds; 
        uint32_t size;
        uint16_t width;
        uint16_t height;
    } stream_info[15];
    dds_t dds;
    
    struct {
        local uint32 i;
        for (i = 0; i < 15; i++) {
            FSeek(startof(dds) + sizeof(dds) + stream_info[i].offset_to_dds);
            if (stream_info[i].size > 0) {
                struct {
                    char data[stream_info[i].size];
                } stream;
            } else {
                break;
            }
        }
    } streams;
};

#ifndef IS_INCLUDE
texture_t Texture;
#endif

#endif