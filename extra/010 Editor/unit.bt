// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// Thanks to:
// - h3x3r (https://reshax.com/profile/183-h3x3r/) for the BMS script and 010 template.
// - Hampter49 (https://reshax.com/profile/1946-hampter49/) for somewhat explaining what I actually needed to do.
// - GameBreaker (https://reshax.com/profile/731-gamebreaker/) for the helpful Stingray playlist video link.
// - DKDave (https://reshax.com/profile/70-dkdave/) for pointing me at a file that revealed so much more about the mesh structure than we had known until now.

#ifndef HELLDIVERS2_UNIT
#define HELLDIVERS2_UNIT

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_UNIT_INCLUDE
#endif
#include "common.bt"
#ifdef HELLDIVERS2_UNIT_INCLUDE
    #undef IS_INCLUDE
#endif

enum unit_datatype_element_type {
    POSITION = 0,
    __COLOR = 1,
    TEXCOORD = 4,
    
    BONE_WEIGHT = 6,
    BONE_INDEX = 7,
}; 

enum unit_datatype_element_format {
    F32VEC1 = 0,
    F32VEC2 = 1,
    F32VEC3 = 2,
    
    //XBGR = 25, or RGBA = 25, or ARGB = 25,
    ABGR = 26,
    
    UNKNOWN_24 = 24, // These don't appear in vertex data.
    UNKNOWN_25 = 25, // These don't appear in vertex data.
    
    F16VEC2 = 29,
    F16VEC4 = 31,
};

struct unit_datatype_t {
	BigEndian();
    uint32_t magic_number <format=hex>;
	LittleEndian();
    
    uint32_t __unk00 <format=hex>;
    struct element_t {
        unit_datatype_element_type type <format=decimal>;
        unit_datatype_element_format format <format=decimal>;
        uint32_t layer <format=decimal>;
        uint32_t __unk00 <format=hex>;
        uint32_t __unk01 <format=hex>;
    } elements[16];
    uint32_t num_elements <format=decimal>;
    uint32_t __unk01 <format=hex>;
    
    struct {
		BigEndian();
        uint32_t magic_number <format=hex>;
		LittleEndian();
        uint32_t __unk00[3] <format=hex>;
        uint32_t vertex_count <format=decimal>;
        uint32_t vertex_stride <format=decimal>;
        uint32_t __unk01[4] <format=hex>;
    } __unk02;
    
    struct {
		BigEndian();
        uint32_t magic_number <format=hex>;
		LittleEndian();
        uint32_t __unk09[3] <format=hex>;
        uint32_t index_count <format=decimal>;
        uint32_t __unk10[5] <format=hex>;
        uint32_t vertex_offset <format=decimal>;
        uint32_t vertex_size <format=decimal>;
        uint32_t index_offset <format=decimal>;
        uint32_t index_size <format=decimal>;
        uint32_t __unk11[4] <format=hex>;
    } __unk03;
};

struct unit_mesh_t {
    struct unit_mesh_header_t {
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        BigEndian();
        uint32_t __unk_commonhash <format=hex>;
        LittleEndian();
        uint32_t __varies <format=hex>;
        uint32_t __varies <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __varies <format=hex>;
        uint32_t datatype <format=decimal>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t materials <format=decimal>;
        uint32_t material_offset <format=decimal>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t groups <format=decimal>;
        uint32_t group_offset <format=decimal>;
    } header;
    
    FSeek(startof(this) + header.material_offset);
	BigEndian();
    uint32_t material[header.materials] <format=hex>;
	LittleEndian();
    
    FSeek(startof(this) + header.group_offset);
    local uint32 i;
    for (i = 0; i < header.groups; i++) {
        struct mesh_group_t {
            uint32_t __unk00 <format=hex>;
            uint32_t vertex_offset <format=decimal>;
            uint32_t vertex_count <format=decimal>;
            uint32_t index_offset <format=decimal>;
            uint32_t index_count <format=decimal>;
            uint32_t __unk01 <format=hex>;
        } group;
    }
};

struct unit_t {
    struct unit_header_t {
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        BigEndian();
        uint64_t bones_file_hash <format=hex>;
        LittleEndian();
        
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        BigEndian();
        uint64_t __unk_hash_usually_self <format=hex>;
        LittleEndian();
        
        BigEndian();
        uint64_t sometimes_bones_file_hash <format=hex>;
        LittleEndian();
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        
        uint32_t __unkoffset <format=decimal>;
        uint32_t __unkoffset <format=decimal>;
        uint32_t __unkoffset <format=decimal>;
        uint32_t __unkoffset <format=decimal>;
        
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        uint32_t __unkoffset <format=decimal>;
        
        uint32_t __unkoffset <format=decimal>;
        uint32_t __unk <format=hex>;
        uint32_t __unkoffset <format=decimal>;
        uint32_t datatype_list_offset <format=decimal>;
        
        uint32_t mesh_data_offset <format=decimal>;
        uint32_t mesh_list_offset <format=decimal>;
        uint32_t __unk <format=hex>;
        uint32_t __unk <format=hex>;
        
        uint32_t material_hashmap_offset <format=decimal>;
    } header;
    
    if (header.__unkoffset[3] != 0) {
        FSeek(header.__unkoffset[3]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk3;
    }
    
    if (header.__unkoffset[2] != 0) {
        FSeek(header.__unkoffset[2]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            // Not the correct size?
            struct {
                uint32_t __unk <format=hex>;
                float width;
                float height;
                float depth;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
                uint32_t __unk <format=hex>;
            } textures[count];
        } __unk2;
    }
    
    if (header.__unkoffset[0] != 0) {
        FSeek(header.__unkoffset[0]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t offsets[count] <format=decimal>;
            
            // Appears correct, yet also incorrect.
            // Fits perfectly between themselves, but when count is >1, the end of the structure is misaligned.
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                struct {
                    uint32_t __unk <format=hex>;
                    BigEndian();
                    uint32_t __unk_commonhash <format=hex>;
                    LittleEndian();
                    uint32_t __unk <format=hex>;
                    uint32_t __unk <format=hex>;
                                        
                    uint32_t count <format=decimal>; // But this odd offset seems to fix itself if this is 4 in the last element. wtf is going on.
                    uint32_t offsets[count] <format=decimal>;
                    uint32_t offset <format=decimal>;
                    
                    local uint32 i;
                    for (i = 0; i < count; i++) {
                        FSeek(startof(this) + offsets[i]);
                        struct {
                            float __unk;
                            float __unk;
                            
                            uint32_t count <format=decimal>;
                            uint32_t data[count] <format=decimal>;
                        } __unk;
                    }
                    
                    FSeek(startof(this) + offset);
                    float __unk_float[7];
                    uint32_t __unk;
                    float __unk;
                    uint32_t __unk;
                } __unk00data;
            };
        } __unk0;
    }
    
    if (header.__unkoffset[1] != 0) { // 
        FSeek(header.__unkoffset[1]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            f32mat4x4_t __unk_f32mat4x4_0[count];
            f32mat4x4_t __unk_f32mat4x4_1[count];
            u16vec2_t __unk_u16vec2_0[count];
			BigEndian();
            uint32_t __unk_commonhash[count] <format=hex>;
			LittleEndian();
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk1;
    }
    
    if (header.__unkoffset[4] != 0) {
        FSeek(header.__unkoffset[4]);
        struct {
            uint32_t length <format=decimal>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t text_length;
            char text[text_length];
            
            // Padding?
            if ((length + 4) % 16 > 0) {
                uint8_t __pad[16 - ((length + 4) % 16)] <format=hex>;
            }
        } __unk4;
    }
        
    if (header.__unkoffset[5] != 0) {
        FSeek(header.__unkoffset[5]);
        struct {
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
            uint32_t __unk <format=hex>;
        } __unk5;
    }
        
    if (header.__unkoffset[6] != 0) { // 768 bytes. Suspicious.
        FSeek(header.__unkoffset[6]);
        struct {
            uint32_t count <format=decimal>;
            uint32_t offsets[count] <format=decimal>;
            
            local uint32 i;
            for(i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                struct {
                    uint32_t count;
                    uint32_t offset;
                    uint32_t offset;
                    uint32_t offset;
                    
                    FSeek(startof(this) + offset[0]);
                    f32mat4x4_t __unk_matrix[count];
                    
                    FSeek(startof(this) + offset[1]);
                    uint32_t __unk_array[count];
                    
                    FSeek(startof(this) + offset[2]);
                    uint32_t __unk;
                    uint32_t __unk;
                    uint32_t count1;
                    uint32_t __unkl[count1];
                } __unk;
            }
        } __unk6;
    }
    
    if (header.datatype_list_offset != 0) {
        FSeek(header.datatype_list_offset);
        struct {
            uint32 count <format=decimal>;
            uint32 offsets[count] <format=decimal>;
			BigEndian();
            uint32 __unk_commonhash[count] <format=hex>;
			LittleEndian();
            uint32 __unk <format=hex>;
            
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                unit_datatype_t datatype;
            }
        } datatypes;
    }
    
    if(header.mesh_list_offset > 0) {
        FSeek(header.mesh_list_offset);
        struct {
            uint32 count <format=decimal>;
            uint32 offsets[count];
			BigEndian();
            uint32 __unk_commonhash[count] <format=hex>;
			LittleEndian();
            
            local uint32 i;
            for (i = 0; i < count; i++) {
                FSeek(startof(this) + offsets[i]);
                unit_mesh_t mesh;
            }
        } meshes;
    }
    
    if(header.material_hashmap_offset > 0) {
        FSeek(header.material_hashmap_offset);
        struct {
            uint32 count <format=decimal>;
			BigEndian();
            uint32 keys[count] <format=hex>;
            uint64 values[count] <format=hex>;
			LittleEndian();
        } materials;
    }
        
    if (header.mesh_data_offset != 0) {
        FSeek(header.mesh_data_offset);
        struct {
            uint32_t count <format=decimal>;        
            uint32_t __unk <format=hex>;
            // If everything is a single file, then __unk7 is the start of mesh data.
            // However the evidence suggests the opposite:
            // - All offsets are relative to the start of the gpu_resources file, not relative to the start of the unit file.
            // - There is no pointer or value that corrects for this error anywhere.
            // - It doesn't make sense to treat it as one file.
            
            local uint64 pos = startof(this) + 8;
            
            local uint32 i;
            local uint32 dtindex = 0;
            local uint32 idxstride = 0;
            local uint32 vtxstride = 0;
            for (i = 0; i < count; i++) {
                //local unit_mesh_t mymesh = meshes.mesh[i]; // can't do this :(
                dtindex = meshes.mesh[i].header.datatype;
                idxstride = (datatypes.datatype[dtindex].__unk03.index_size / datatypes.datatype[dtindex].__unk03.index_count);
                vtxstride = datatypes.datatype[dtindex].__unk02.vertex_stride;
                
                FSeek(pos + datatypes.datatype[dtindex].__unk03.vertex_offset + meshes.mesh[i].group[0].vertex_offset * vtxstride);
                struct meshinfo_data_t {
                    local uint32 j;
                    for (j = 0; j < meshes.mesh[i].header.groups; j++) {
                        struct {
                            FSeek(pos + datatypes.datatype[dtindex].__unk03.vertex_offset + meshes.mesh[i].group[j].vertex_offset * vtxstride);
                            struct {
                                local uint32 k;
                                local uint32 type;
                                local uint32 format;
                                for (k = 0; k < datatypes.datatype[dtindex].num_elements; k++) { // This aint looping right, chief. What the heck?
                                    type = datatypes.datatype[dtindex].elements[k].type;
                                    format = datatypes.datatype[dtindex].elements[k].format;
                                    switch(format) {
                                        case ABGR:
                                            u8vec4_t data;
                                            break;
                                        case F16VEC2:
                                            f16vec2_t data;
                                            break;
                                        case F32VEC3:
                                            f32vec3_t data;
                                            break;
                                    }
                                }
                            } vertex [meshes.mesh[i].group[j].vertex_count] <optimize = false>;
                               
                            FSeek(pos
                                + datatypes.datatype[dtindex].__unk03.index_offset
                                + meshes.mesh[i].group[j].index_offset * idxstride
                            );
                            struct {
                                if (idxstride == 4) {
                                    uint32_t _0, _1, _2;
                                } else {
                                    uint16_t _0, _1, _2;
                                }
                            } face [meshes.mesh[i].group[j].index_count / 3] <optimize=false, size=(idxstride * 3)>;
                        } group;
                    }
                } data;
            }
        } meshdatas;
    }
    
};

#ifndef IS_INCLUDE
unit_t Unit;
#endif

#endif
