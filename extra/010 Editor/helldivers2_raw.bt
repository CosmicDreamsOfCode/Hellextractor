// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

OutputPaneClear();LittleEndian();

#define IS_INCLUDE
#include "helldivers2_common.bt"
#include "helldivers2_datatype.bt"
#include "helldivers2_mesh.bt"

struct offset {
    uint64_t datatype;
    uint64_t mesh;
    uint64_t vertices;
    uint64_t indices;
} Offsets;

FSeek(Offsets.datatype);
datatype_t DataType;

FSeek(Offsets.mesh);
mesh_t Mesh;

FSeek(Offsets.vertices);
struct vertex {
    local uint32_t i;
    for (i = 0; i < DataType.num_elements; i++) {
        switch(DataType.elements[i].type) {
        case POSITION: switch(DataType.elements[i].format) {
            case F32VEC3: f32vec3_t position; break;
            default: byte unknownFixMe[0x7FFFFFFF];
            }; break;
        case __COLOR: switch(DataType.elements[i].format) {
            case ABGR: u8vec4_t color; break;
            default: byte unknownFixMe[0x7FFFFFFF];
            }; break;
        case TEXCOORD: switch(DataType.elements[i].format) {
            case F16VEC2: f16vec2_t texcoord; break;
            default: byte unknownFixMe[0x7FFFFFFF];
            }; break;
        default:
            struct {
                switch(DataType.elements[i].format) {
                    case 0: f32vec1_t _; break;
                    case 1: f32vec2_t _; break;
                    case 3: f32vec4_t _; break;                    
                    case 4: byte _[4]; break;                    
                    case 17: s32vec1_t _; break;
                    case 18: s32vec2_t _; break;
                    case 19: s32vec3_t _; break;
                    case 20: s32vec4_t _; break;                    
                    case 21: s8vec1_t _; break;
                    case 22: s8vec2_t _; break;
                    case 23: s8vec3_t _; break;
                    case 24: s8vec4_t _; break;
                    case 25: u8vec4_t _; break;
                    case 28: f16vec1_t _; break;
                    case 30: f16vec3_t _; break;
                    
                    case F32VEC3: f32vec3_t _; break;
                    
                    case ABGR: s8vec4_t _; break;
                                        
                    case F16VEC2: f16vec2_t _; break;
                    case F16VEC4: f16vec4_t _; break;
                    
                    default: byte unknownFixMe[0x7FFFFFFF];
                };
            } el <optimize=false>;
            break;
        }
    }    
} Vertices[Mesh.DataInfo.vertex_count] <optimize=false, size=DataType.__unk02.vertex_stride>;
    
FSeek(Offsets.indices);
struct face {
    local uint32_t stride = DataType.__unk03.index_size / DataType.__unk03.index_count;
    if (stride == 1) {
        uint8_t idx[3];
    } else if (stride == 2) {
        uint16_t idx[3];
    } else if (stride == 4) {
        uint32_t idx[3];
    } else if (stride == 8) {
        uint64_t idx[3];
    }
} Faces[Mesh.DataInfo.index_count / 3] <optimize=false>;