// Copyright 2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef HELLDIVERS2_DATATYPE
#define HELLDIVERS2_DATATYPE

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_DATATYPE_INCLUDE
#endif
#include "helldivers2_common.bt"
#ifdef HELLDIVERS2_DATATYPE_INCLUDE
    #undef IS_INCLUDE
#endif

enum datatype_element_type {
    POSITION = 0,
    __COLOR = 1,
    TEXCOORD = 4,
    
    BONE_WEIGHT = 6,
    BONE_INDEX = 7,
}; 

enum datatype_element_format {
    F32VEC3 = 2,
    
    //XBGR = 25, or RGBA = 25, or ARGB = 25,
    ABGR = 26,
    
    F16VEC2 = 29,
    F16VEC4 = 31,
};

struct datatype_t {
	BigEndian();
    uint32_t magic_number <format=hex>;
	LittleEndian();
    uint32_t __unk00 <format=hex>;
    struct element_t {
        datatype_element_type type <format=decimal>;
        datatype_element_format format <format=decimal>;
        uint32_t layer <format=decimal>;
        uint32_t __unk00 <format=hex>;
        uint32_t __unk01 <format=hex>;
    } elements[16];
    uint32_t num_elements <format=decimal>;
    uint32_t __unk01 <format=hex>;
    struct {
		BigEndian();
        uint32_t magic_number <format=hex>;
		LittleEndian();
        uint32_t __unk00[3] <format=hex>;
        uint32_t vertex_count <format=decimal>;
        uint32_t vertex_stride <format=decimal>;
        uint32_t __unk01[4] <format=hex>;
    } __unk02;
    struct {
		BigEndian();
        uint32_t magic_number <format=hex>;
		LittleEndian();
        uint32_t __unk09[3] <format=hex>;
        uint32_t index_count <format=decimal>;
        uint32_t __unk10[5] <format=hex>;
        uint32_t vertex_offset <format=decimal>;
        uint32_t vertex_size <format=decimal>;
        uint32_t index_offset <format=decimal>;
        uint32_t index_size <format=decimal>;
        uint32_t __unk11[4] <format=hex>;
    } __unk03;
};

#ifndef IS_INCLUDE
datatype_t DataType;
#endif

#endif
