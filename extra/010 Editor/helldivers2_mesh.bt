#ifndef HELLDIVERS2_MESH
#define HELLDIVERS2_MESH

#ifndef IS_INCLUDE
    #define IS_INCLUDE
    #define HELLDIVERS2_MESH_INCLUDE
#endif
#include "helldivers2_common.bt"
#ifdef HELLDIVERS2_MESH_INCLUDE
    #undef IS_INCLUDE
#endif

struct mesh_group_t {
    uint32_t __unk00;
    uint32_t vertex_offset;
    uint32_t vertex_count;
    uint32_t index_offset;
    uint32_t index_count;
    uint32_t __unk01;
};

struct mesh_t {
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __sameAsIndenticalAcrossTypesAtIdx;
    uint32_t __varies;
    uint32_t __varies;
    uint32_t __unk;
    uint32_t __varies;
    uint32_t datatype;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t materials;
    uint32_t material_offset;
    uint32_t __unk;
    uint32_t __unk;
    uint32_t groups;
    uint32_t group_offset;
    
    FSeek(startof(this) + material_offset);
    uint32_t material[materials];
    
    FSeek(startof(this) + group_offset);
    local uint32 i;
    for (i = 0; i < groups; i++) {
        mesh_group_t group;
    }
};

#ifndef IS_INCLUDE
mesh_t Mesh;
#endif

#endif